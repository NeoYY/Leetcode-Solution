/*  
This can be considered as part of merge sort
I used 5 minutes to write the algorithm, while spent an hour and more to debug the initialization of variables.
Remember, C++ does not support initialization like int k, left, right = 0. Only right will be assigned to 0, others will be undefined.



Below are the problem.

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]


Below are the code. Using outplace. We can use inplace if we start from the end of array and start reversely.
*/


class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if ( nums1.size() == 0 ) return;
        vector<int> temp = nums1;

        int k = 0; 
        int left = 0;
        int right = 0;
        while ( left < m && right < n )
        {
            if (nums1[left] <= nums2[right] )
            {
                temp[k++] = nums1[left++];
            }
            else
            {
                temp[k++] = nums2[right++];
            }
        }
        for( int i = 0; i < nums1.size(); i++ )
        {
            std::cout<<temp[i]<<" ";
        }
        std::cout<<endl;        
        while ( left < m )
        {
            temp[k++] = nums1[left++];
            
        }
        while ( right < n )
        {
            temp[k++] = nums2[right++];
        }
        for ( unsigned int i = 0; i < temp.size(); i++ )
        {
            nums1[i] = temp[i];
        }
    }
};
